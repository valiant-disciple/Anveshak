#include <ros.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Float32.h>

// Stepper Constants
const int STEP = 14;
const int  steps_per_rev = 200;

// Pump Constants - L
const int PWMA_L = 33; //Speed control 
const int AIN1_L = 27; //Direction
const int AIN2_L = 25; //Direction

// Pump Constants - C
const int PWMA_C = 15; //Speed control 
const int AIN1_C = 4; //Direction
const int AIN2_C = 18; //Direction

// Pump Constants - R
const int PWMA_R = 2; //Speed control 
const int AIN1_R = 17; //Direction
const int AIN2_R = 16; //Direction

// Halogen Lamp
const int HALO = 5;

ros::NodeHandle nh;

void move(int motor, int speed, int direction){
//speed: 0 is off, and 255 is full speed
//direction: 0 clockwise, 1 counter-clockwise 
  boolean inPin1 = LOW;
  boolean inPin2 = HIGH;
  if(direction == 1){
    inPin1 = HIGH;
    inPin2 = LOW;
  }

  if(motor == 1){
    digitalWrite(AIN1_L, inPin1);
    digitalWrite(AIN2_L, inPin2);
    analogWrite(PWMA_L, speed);
}
  if(motor == 2){
    digitalWrite(AIN1_C, inPin1);
    digitalWrite(AIN2_C, inPin2);
    analogWrite(PWMA_C, speed);
}
  if(motor == 3){
    digitalWrite(AIN1_R, inPin1);
    digitalWrite(AIN2_R, inPin2);
    analogWrite(PWMA_R, speed);
}
}


void pump_l_cb(const std_msgs::Int8& cmd_msg)
{
  if (int(cmd_msg.data) == 1)
  {
    move(1, 255, 1);
    delay(5000);
    move(1, 0, 1);
    delay(50);
  }
}

void pump_c_cb(const std_msgs::Int8& cmd_msg)
{
  if (int(cmd_msg.data) == 1)
  {
    move(2, 255, 1);
    delay(5000);
    move(2, 0, 1);
    delay(50);
  }
}

void pump_r_cb(const std_msgs::Int8& cmd_msg)
{
  if (int(cmd_msg.data) == 1)
  {
    move(3, 255, 1);
    delay(5000);
    move(3, 0, 1);
    delay(50);
  }
}

void halo_cb(const std_msgs::Int8& cmd_msg)
{
  if (int(cmd_msg.data) == 1)
  {
    digitalWrite(HALO, HIGH);
    delay(5000);
    digitalWrite(HALO, LOW);
  }
}

void spectro_cb(const std_msgs::Int8& cmd_msg)
{
  digitalWrite(DIR, HIGH);
  int n = int(cmd_msg.data);
   if(n==1)
  {
    for(int i = 0; i<30; i++)
  {
    digitalWrite(STEP, HIGH);
    delayMicroseconds(2000);
    digitalWrite(STEP, LOW);
    delayMicroseconds(2000);
  }
  }
  if(n==2)
  {
    for(int i = 0; i<30; i++)
  {
    digitalWrite(STEP, HIGH);
    delayMicroseconds(2000);
    digitalWrite(STEP, LOW);
    delayMicroseconds(2000);
  }
  for(int i = 0; i<90; i++)
  {
    digitalWrite(STEP, HIGH);
    delayMicroseconds(2000);
    digitalWrite(STEP, LOW);
    delayMicroseconds(2000);
  }
  }
  if(n==3)
  {for(int i = 0; i<150; i++)
  {
    digitalWrite(STEP, HIGH);
    delayMicroseconds(2000);
    digitalWrite(STEP, LOW);
    delayMicroseconds(2000);
  }
}
digitalWrite(HALO, HIGH);
delay(7000);
digitalWrite(HALO, LOW);
}

ros::Subscriber<std_msgs::Int8> pump_l_sub("pump_l_status", pump_l_cb);
ros::Subscriber<std_msgs::Int8> pump_c_sub("pump_c_status", pump_c_cb);
ros::Subscriber<std_msgs::Int8> pump_r_sub("pump_r_status", pump_r_cb);
ros::Subscriber<std_msgs::Int8> spectro_sub("spectro_status", spectro_cb);
ros::Subscriber<std_msgs::Int8> halo_sub("halo_status", halo_cb);

void setup(){
  pinMode(PWMA_L, OUTPUT);
  pinMode(AIN1_L, OUTPUT);
  pinMode(AIN2_L, OUTPUT);
  pinMode(PWMA_C, OUTPUT);
  pinMode(AIN1_C, OUTPUT);
  pinMode(AIN2_C, OUTPUT);
  pinMode(PWMA_R, OUTPUT);
  pinMode(AIN1_R, OUTPUT);
  pinMode(AIN2_R, OUTPUT);
  pinMode(STEP, OUTPUT);
  pinMode(DIR, OUTPUT);
  pinMode(HALO, OUTPUT);

  nh.getHardware()->setBaud(115200);
  nh.initNode();
  nh.subscribe(pump_l_sub);
  nh.subscribe(pump_c_sub);
  nh.subscribe(pump_r_sub);
  nh.subscribe(spectro_sub);
  nh.subscribe(halo_sub);
}

  void loop()
{
  nh.spinOnce();
  delay(500);
}
